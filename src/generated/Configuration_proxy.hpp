
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_lem0n_OMP_dbus_configurationManager_src_generated_Configuration_proxy_hpp__proxy__H__
#define __sdbuscpp___home_lem0n_OMP_dbus_configurationManager_src_generated_Configuration_proxy_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace com {
namespace system {
namespace configurationManager {
namespace Application {

class Configuration_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "com.system.configurationManager.Application.Configuration";

protected:
    Configuration_proxy(sdbus::IProxy& proxy)
        : proxy_(&proxy)
    {
        proxy_->uponSignal("configurationChanged").onInterface(INTERFACE_NAME).call([this](const std::map<std::string, sdbus::Variant>& configuration){ this->onConfigurationChanged(configuration); });
    }

    Configuration_proxy(const Configuration_proxy&) = delete;
    Configuration_proxy& operator=(const Configuration_proxy&) = delete;
    Configuration_proxy(Configuration_proxy&&) = default;
    Configuration_proxy& operator=(Configuration_proxy&&) = default;

    ~Configuration_proxy() = default;

    virtual void onConfigurationChanged(const std::map<std::string, sdbus::Variant>& configuration) = 0;

public:
    void ChangeConfiguration(const std::string& key, const sdbus::Variant& value)
    {
        proxy_->callMethod("ChangeConfiguration").onInterface(INTERFACE_NAME).withArguments(key, value);
    }

    std::map<std::string, sdbus::Variant> GetConfiguration()
    {
        std::map<std::string, sdbus::Variant> result;
        proxy_->callMethod("GetConfiguration").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy* proxy_;
};

}}}} // namespaces

#endif
